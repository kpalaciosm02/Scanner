package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal ReservadaArray, ReservadaBegin, ReservadaBoolean, ReservadaByte, ReservadaCase, 
ReservadaChar, ReservadaConst, ReservadaDo, ReservadaDownto, ReservadaElse, ReservadaEnd, 
ReservadaFalse, ReservadaFile, ReservadaFor, ReservadaForward, ReservadaFunction, ReservadaGoto, 
ReservadaIf, ReservadaIn, ReservadaInline, ReservadaInt, ReservadaLabel, ReservadaLongInt, 
ReservadaNil, ReservadaOf, ReservadaPacked, ReservadaProcedure, ReservadaProgram, ReservadaRead, 
ReservadaReal, ReservadaRecord, ReservadaRepeat, ReservadaSet, ReservadaShortInt, ReservadaString, 
ReservadaThen, ReservadaTo, ReservadaTrue, ReservadaType, ReservadaUntil, ReservadaVar, ReservadaWhile, 
ReservadaWith, ReservadaWrite, CambioLinea, Caracter, OperadorIgual, OperadorComa, OperadorPuntoYComa, 
OperadorIncremento, OperadorDecremento, OperadorMayorOIgualQue, OperadorMayorQue, OperadorMenorOIgualQue, 
OperadorMenorQue, OperadorDiferente, OperadorSuma, OperadorResta, OperadorMultiplicacion, OperadorDivision, 
OperadorParentesisIzquierdo, OperadorParentesisDerecho, OperadorCorcheteIzquierdo, OperadorCorcheteDerecho, 
OperadorAsignacion, OperadorPunto, OperadorDosPuntos, OperadorSumaAsignacion, OperadorRestaAsignacion, 
OperadorMultiplicacionAsignacion, OperadorDivisionAsignacion, OperadorDesplazamientoDerecha, 
OperadorDesplazamientoIzquierda, OperadorDesplazamientoIzquierdaAsignacion, OperadorDesplazamientoDerechaAsignacion, 
OperadorNot, OperadorOr, OperadorAnd, OperadorXor, OperadorDiv, OperadorMod, Error, Identificador, Entero, Flotante, String, ε;
non terminal Inicio,SeccionConst, LoopConst, ValorConst,
 SeccionGlobales, SeccionFunciones, SeccionMain, LoopVar, Tipo, LoopIdentificadores, OpcionesFunciones, ParamsFunciones;

start with Inicio;
/*no terminal inicial*/
/*Inicio ::= ReservadaProgram Identificador SeccionConst SeccionGlobales SeccionFunciones SeccionMain;*/
Inicio ::= ReservadaProgram Identificador CambioLinea SeccionConst SeccionGlobales SeccionFunciones;

/*Seccion constantes funcional*/
SeccionConst ::= ReservadaConst CambioLinea LoopConst | ;
LoopConst ::= Identificador OperadorIgual ValorConst OperadorPuntoYComa CambioLinea LoopConst | ;
ValorConst ::= Entero | Flotante | String;

/*Seccion de variables globales funcional*/
SeccionGlobales ::= ReservadaVar CambioLinea LoopVar | ;
LoopVar ::= LoopIdentificadores OperadorDosPuntos Tipo OperadorPuntoYComa CambioLinea LoopVar | ;
LoopIdentificadores ::= Identificador OperadorComa LoopIdentificadores | Identificador;
Tipo ::= ReservadaInt | ReservadaLongInt | ReservadaShortInt | ReservadaChar | ReservadaString | ReservadaBoolean | ReservadaReal;

/*Seccion de funciones*/
OpcionesFunciones ::= ReservadaFunction | ReservadaProcedure;
ParamsFunciones ::= Tipo Identificador | Tipo Identificador OperadorComa ParamsFunciones;
SeccionFunciones ::= OpcionesFunciones Identificador OperadorParentesisIzquierdo ParamsFunciones OperadorParentesisDerecho| ;


/*
Inicio ::= SeccionMain;

SeccionMain ::= ReservadaProgram Identificador CambioLinea SeccionConst SeccionGlobales SeccionFunciones ReservadaBegin SENTENCIA ReservadaEnd;

SeccionConst ::= ReservadaConst DECLARACION Const CambioLinea | ε;

SeccionGlobales ::= ReservadaVar DECLARACION P_coma CambioLinea | ε;

SeccionFunciones ::= SeccionFunciones Funcion CambioLinea | ε;

DECLARACION ::= TIPO Identificador P_coma CambioLinea | TIPO Identificador Asignacion EXPRESION P_coma CambioLinea | ε;

TIPO ::= ReservadaInt | ReservadaLongInt | ReservadaShortInt | ReservadaChar | ReservadaString | ReservadaBoolean | ReservadaReal;

SENTENCIA ::= SENTENCIA ASIGNACION P_coma CambioLinea | SENTENCIA CONTROL | SENTENCIA LLAMADA_FUNCION P_coma CambioLinea | ε;

ASIGNACION ::= Identificador OperadorAsignacion EXPRESION | Identificador OperadorIncremento | OperadorIncremento Identificador;

EXPRESION ::= EXPRESION_ARITMETICA | EXPRESION_BOOLEANA | Valor | Identificador;

EXPRESION_ARITMETICA ::= EXPRESION Suma EXPRESION | EXPRESION Resta EXPRESION | EXPRESION Multiplicacion EXPRESION | EXPRESION Division EXPRESION | EXPRESION Mod EXPRESION | OperadorParentesisIzquierdo EXPRESION OperadorParentesisDerecho;

EXPRESION_BOOLEANA ::= EXPRESION OperadorIgual EXPRESION | EXPRESION OperadorMayorOIgualQue EXPRESION | EXPRESION OperadorMayorQue EXPRESION | EXPRESION OperadorMenorOIgualQue EXPRESION | EXPRESION OperadorMenorQue EXPRESION | EXPRESION OperadorDiferente EXPRESION | EXPRESION OperadorOr EXPRESION | EXPRESION OperadorAnd EXPRESION | OperadorNot EXPRESION;

CONTROL ::= WHILE | DO_WHILE | FOR | IF | IF_ELSE;

WHILE ::= ReservadaWhile OperadorParentesisIzquierdo SENTENCIA_BOOLEANA OperadorParentesisDerecho ReservadaDo CUERPO;

DO_WHILE ::= ReservadaDo CUERPO ReservadaWhile OperadorParentesisIzquierdo SENTENCIA_BOOLEANA OperadorParentesisDerecho P_coma;

FOR ::= ReservadaFor OperadorParentesisIzquierdo DECLARACION_FOR P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR OperadorParentesisDerecho CUERPO;

DECLARACION_FOR ::= Identificador OperadorAsignacion Entero | Identificador OperadorIncremento | OperadorIncremento Identificador;

IF ::= ReservadaIf OperadorParentesisIzquierdo SENTENCIA_BOOLEANA OperadorParentesisDerecho CUERPO;

IF_ELSE ::= ReservadaIf OperadorParentesisIzquierdo SENTENCIA_BOOLEANA OperadorParentesisDerecho CUERPO ReservadaElse CUERPO;

CUERPO ::= Llave_a SENTENCIA Llave_c;

LLAMADA_FUNCION ::= Identificador OperadorParentesisIzquierdo ARGUMENTOS OperadorParentesisDerecho;

ARGUMENTOS ::= EXPRESION | EXPRESION Coma ARGUMENTOS;

RETURN ::= Identificador OperadorAsignacion EXPRESION P_coma | ε;
*/