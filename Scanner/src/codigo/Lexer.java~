/* The following code was generated by JFlex 1.4.3 on 10/31/23, 10:45 AM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/31/23, 10:45 AM from the specification file
 * <tt>C:/Users/kpala/OneDrive/Desktop/Scanner/Scanner/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO_MULTILINEA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\2\46\1\42\22\0\1\60\1\5\1\45\1\50"+
    "\1\5\1\0\1\5\1\0\1\36\1\40\1\37\1\55\1\51\1\7"+
    "\1\57\1\41\1\10\11\2\1\55\1\51\1\53\1\52\1\54\1\0"+
    "\1\5\1\11\1\14\1\23\1\26\1\6\1\30\1\15\1\25\1\16"+
    "\1\1\1\33\1\21\1\34\1\17\1\20\1\32\1\1\1\12\1\24"+
    "\1\22\1\31\1\35\1\27\1\56\1\13\1\1\1\51\1\0\1\51"+
    "\1\0\1\1\1\5\1\11\1\14\1\23\1\26\1\6\1\30\1\15"+
    "\1\25\1\16\1\1\1\33\1\21\1\34\1\17\1\20\1\32\1\1"+
    "\1\12\1\24\1\22\1\31\1\35\1\27\1\56\1\13\1\1\1\43"+
    "\1\5\1\44\1\47\6\0\1\46\u1fa2\0\2\46\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\1\2"+
    "\1\6\1\3\22\2\4\6\3\1\3\6\1\2\1\1"+
    "\1\6\2\1\1\0\1\1\1\3\3\1\2\2\2\0"+
    "\7\2\2\7\2\2\1\6\12\2\1\7\13\2\1\0"+
    "\1\4\1\0\1\4\3\0\1\10\1\0\1\11\1\2"+
    "\1\1\2\0\2\12\2\0\3\12\3\0\3\1\1\3"+
    "\3\1\2\13\1\2\1\0\20\2\1\7\4\2\1\0"+
    "\1\11\2\12\2\14\1\1\1\0\1\1\2\13\1\1"+
    "\15\2\1\14\1\13\1\0\2\1\12\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\142"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\223\0\u0bad"+
    "\0\u0bde\0\223\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u1076\0\u0620\0\142\0\u10a7\0\u10d8\0\u1109\0\142"+
    "\0\u113a\0\u0682\0\u116b\0\u119c\0\u11cd\0\u07d9\0\u07d9\0\u11fe"+
    "\0\u122f\0\u1260\0\u1109\0\u1291\0\u122f\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac"+
    "\0\u12f3\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\142\0\u11cd\0\u1975\0\u07d9\0\u1109\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\142\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u11cd\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\4\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\4\1\27\1\30"+
    "\1\31\1\32\1\33\1\4\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\6\1\42\1\3\1\43\1\3\1\10"+
    "\1\44\2\40\1\45\1\46\1\47\1\50\1\51\1\6"+
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\4\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\4\1\27\1\30"+
    "\1\31\1\32\1\33\1\4\1\34\1\35\1\52\1\37"+
    "\1\40\1\41\1\6\1\53\1\3\1\54\1\3\1\10"+
    "\1\44\2\40\1\45\1\46\1\47\1\50\1\51\1\6"+
    "\62\0\2\4\2\0\1\10\1\4\1\0\26\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\2\0\1\55\1\56"+
    "\1\57\1\55\1\0\1\60\1\56\1\55\1\57\25\56"+
    "\1\55\1\60\7\55\1\60\6\55\1\56\1\61\1\55"+
    "\3\0\1\6\36\0\1\6\15\0\1\6\4\0\1\7"+
    "\55\0\2\62\2\0\1\10\1\62\1\0\26\62\1\0"+
    "\1\10\7\0\1\10\6\0\1\62\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\7\4\1\63\1\4\1\64\14\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\4\0\1\65"+
    "\5\0\1\65\41\0\1\40\6\0\1\55\1\56\1\66"+
    "\1\55\1\0\1\60\1\56\1\55\1\66\25\56\1\55"+
    "\1\60\7\55\1\60\6\55\1\56\1\61\1\55\1\0"+
    "\2\4\2\0\1\10\1\4\1\0\2\4\1\67\4\4"+
    "\1\70\16\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\71\1\0\26\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\72\1\0\3\4\1\73\4\4\1\74\15\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\10\4\1\75\15\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\7\4\1\76\10\4\1\77\5\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\6\4\1\100\1\4\1\101"+
    "\15\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\2\4\1\102\15\4"+
    "\1\77\5\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\1\4\1\103"+
    "\6\4\1\104\15\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\2\4"+
    "\1\105\1\106\4\4\1\77\4\4\1\107\10\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\1\4\1\64\6\4\1\110\4\4"+
    "\1\35\10\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\111\1\0\12\4\1\112"+
    "\2\4\1\113\10\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\6\4"+
    "\1\114\1\4\1\115\15\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\2\4\1\116\3\4\1\117\6\4\1\120\10\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\1\4\1\121\4\4\1\122\1\4"+
    "\1\123\10\4\1\124\4\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\7\4\1\125\16\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\1\4"+
    "\1\126\1\127\23\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\10\4"+
    "\1\70\15\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\1\4\1\130"+
    "\24\4\1\0\1\10\7\0\1\10\6\0\1\4\41\0"+
    "\1\131\22\0\2\62\2\0\1\10\1\62\1\0\26\62"+
    "\1\0\1\10\7\0\1\10\2\0\1\40\3\0\1\62"+
    "\43\0\1\132\10\0\1\40\6\0\44\133\1\134\14\133"+
    "\1\135\2\136\1\135\1\137\1\135\1\136\1\135\26\136"+
    "\7\135\1\140\10\135\1\136\1\135\1\141\2\0\1\142"+
    "\5\0\1\142\122\0\1\40\1\47\1\40\56\0\1\40"+
    "\1\0\1\47\56\0\1\40\7\0\2\4\2\0\1\10"+
    "\1\4\1\0\10\4\1\143\15\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\4\0\1\144\5\0\1\144\46\0"+
    "\1\40\40\0\1\145\21\0\4\146\1\147\35\146\1\150"+
    "\1\146\1\134\1\146\1\147\1\133\11\146\1\151\2\152"+
    "\1\151\1\153\1\151\1\152\1\151\26\152\4\151\1\154"+
    "\2\151\1\140\1\155\7\151\1\152\1\151\1\156\2\0"+
    "\1\157\3\0\1\160\1\0\1\157\51\0\1\161\1\162"+
    "\2\0\1\10\1\163\1\0\1\162\25\161\1\0\1\10"+
    "\7\0\1\10\6\0\1\161\3\0\1\161\1\164\2\0"+
    "\1\10\1\163\1\0\1\164\25\161\1\0\1\10\7\0"+
    "\1\10\6\0\1\161\1\165\2\0\1\62\1\166\2\0"+
    "\1\10\1\167\1\0\1\166\25\62\1\0\1\10\7\0"+
    "\1\10\6\0\1\62\4\0\1\170\3\0\1\160\1\0"+
    "\1\171\51\0\2\62\3\0\1\62\1\0\26\62\20\0"+
    "\1\62\3\0\2\4\2\0\1\10\1\4\1\0\16\4"+
    "\1\77\7\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\14\4\1\172"+
    "\11\4\1\0\1\10\7\0\1\10\6\0\1\4\2\0"+
    "\4\55\1\0\54\55\1\0\1\161\1\173\2\0\1\10"+
    "\1\163\1\0\1\173\25\161\1\0\1\10\7\0\1\10"+
    "\6\0\1\161\1\3\2\0\2\4\2\0\1\10\1\4"+
    "\1\0\2\4\1\174\23\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\16\4\1\102\7\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\1\4"+
    "\1\175\11\4\1\176\6\4\1\177\3\4\1\0\1\10"+
    "\7\0\1\10\6\0\1\4\3\0\2\4\2\0\1\10"+
    "\1\4\1\0\5\4\1\200\20\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\12\4\1\172\13\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\10\4\1\201\15\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\12\4"+
    "\1\202\13\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\11\4\1\203"+
    "\1\77\13\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\11\4\1\77"+
    "\14\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\12\4\1\102\13\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\4\4\1\204\21\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\7\4\1\205\16\4\1\0\1\10"+
    "\7\0\1\10\6\0\1\4\3\0\2\4\2\0\1\10"+
    "\1\4\1\0\21\4\1\172\4\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\22\4\1\172\3\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\206\1\0"+
    "\26\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\7\4\1\207\16\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\12\4\1\77\13\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\2\4\1\210\23\4\1\0\1\10"+
    "\7\0\1\10\6\0\1\4\3\0\2\4\2\0\1\10"+
    "\1\4\1\0\10\4\1\211\15\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\25\4\1\102\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\17\4"+
    "\1\212\6\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\6\4\1\73"+
    "\17\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\12\4\1\213\13\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\6\4\1\122\17\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\11\4\1\64\14\4\1\0\1\10"+
    "\7\0\1\10\6\0\1\4\3\0\2\4\2\0\1\10"+
    "\1\4\1\0\11\4\1\172\14\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\2\4\1\214\23\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\7\4\1\215\16\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\12\4"+
    "\1\216\13\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\13\4\1\217"+
    "\12\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\10\4\1\220\15\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\2\4\1\77\23\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\2\0\37\131\1\221"+
    "\21\131\4\132\1\0\35\132\1\0\16\132\4\135\1\137"+
    "\40\135\1\0\14\135\2\141\1\135\1\137\1\135\1\141"+
    "\1\135\26\141\7\135\1\222\10\135\1\141\1\135\1\141"+
    "\45\137\1\140\13\137\1\135\2\141\1\135\1\137\1\135"+
    "\1\141\1\135\26\141\7\135\1\140\10\135\1\141\1\135"+
    "\1\141\1\0\2\4\2\0\1\10\1\4\1\0\2\4"+
    "\1\102\23\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\4\0\1\144\5\0\1\144\50\0\4\145\1\223\32\145"+
    "\1\221\1\131\1\145\1\224\3\145\1\223\1\131\11\145"+
    "\4\146\1\225\35\146\1\150\1\146\1\134\1\146\1\147"+
    "\1\133\11\146\4\151\1\153\35\151\1\154\2\151\1\0"+
    "\1\155\13\151\2\156\1\151\1\153\1\151\1\156\1\151"+
    "\26\156\4\151\1\154\2\151\1\222\1\155\7\151\1\156"+
    "\1\151\1\156\4\151\1\226\35\151\1\154\2\151\1\0"+
    "\1\155\13\151\2\156\1\151\1\153\1\151\1\156\1\151"+
    "\26\156\4\151\1\154\2\151\1\140\1\155\7\151\1\156"+
    "\1\151\1\156\2\0\1\157\3\0\1\227\1\0\1\157"+
    "\52\0\1\144\4\0\1\230\52\0\2\161\2\0\1\10"+
    "\1\161\1\0\26\161\1\0\1\10\7\0\1\10\6\0"+
    "\1\161\3\0\1\161\1\162\2\0\1\10\1\231\1\0"+
    "\1\162\25\161\1\0\1\10\7\0\1\10\6\0\1\161"+
    "\3\0\2\161\2\0\1\10\1\161\1\230\26\161\1\0"+
    "\1\10\7\0\1\10\6\0\1\161\3\0\1\161\1\164"+
    "\2\0\1\10\1\231\1\0\1\164\25\161\1\0\1\10"+
    "\7\0\1\10\6\0\1\161\1\165\3\0\1\232\5\0"+
    "\1\233\51\0\1\62\1\166\3\0\1\234\1\0\1\166"+
    "\25\62\20\0\1\62\3\0\2\62\3\0\1\62\1\230"+
    "\26\62\20\0\1\62\4\0\1\170\3\0\1\227\1\0"+
    "\1\170\51\0\2\4\2\0\1\10\1\77\1\0\26\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\1\161"+
    "\1\173\2\0\1\10\1\231\1\0\1\173\25\161\1\0"+
    "\1\10\7\0\1\10\6\0\1\161\1\3\2\0\2\4"+
    "\2\0\1\10\1\4\1\0\1\4\1\235\24\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\11\4\1\77\4\4\1\77\7\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\10\4\1\236\15\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\237\1\0\26\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\6\4\1\206\17\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\11\4"+
    "\1\240\14\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\10\4\1\77"+
    "\15\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\6\4\1\241\17\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\100\1\0\26\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\5\4\1\242\20\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\7\4\1\77\16\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\14\4"+
    "\1\111\11\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\6\4\1\243"+
    "\17\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\2\4\1\244\23\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\7\4\1\75\16\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\15\4\1\77\10\4\1\0\1\10"+
    "\7\0\1\10\6\0\1\4\3\0\2\4\2\0\1\10"+
    "\1\4\1\0\17\4\1\245\6\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\13\4\1\246\12\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\6\4\1\100\17\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\23\4"+
    "\1\247\2\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\5\4\1\250"+
    "\5\4\1\251\12\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\2\0\37\131\1\221\1\134\20\131\4\145\1\252"+
    "\32\145\1\221\1\131\1\145\1\224\3\145\1\223\1\131"+
    "\11\145\2\0\1\253\4\0\1\254\53\0\1\144\57\0"+
    "\1\161\1\255\2\0\1\10\1\161\1\254\26\161\1\0"+
    "\1\10\7\0\1\10\6\0\1\161\4\0\1\232\5\0"+
    "\1\232\51\0\1\62\1\256\3\0\1\62\1\254\26\62"+
    "\20\0\1\62\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\3\4\1\77\22\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\2\4"+
    "\1\63\23\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\1\4\1\111"+
    "\24\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\257\1\0\26\4\1\0\1\10"+
    "\7\0\1\10\6\0\1\4\3\0\2\4\2\0\1\10"+
    "\1\4\1\0\7\4\1\172\16\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\6\4\1\260\17\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\7\4\1\261\16\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\12\4"+
    "\1\242\13\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\1\4\1\236"+
    "\24\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\12\4\1\262\13\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\63\1\0\26\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\2\4\1\263\23\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\264\1\0"+
    "\26\4\1\0\1\10\7\0\1\10\6\0\1\4\2\0"+
    "\4\144\1\0\54\144\2\0\1\253\56\0\1\144\2\161"+
    "\1\144\1\0\1\10\1\161\1\144\26\161\1\144\1\10"+
    "\7\144\1\10\6\144\1\161\3\144\2\62\1\144\1\0"+
    "\1\144\1\62\1\144\26\62\20\144\1\62\2\144\1\0"+
    "\2\4\2\0\1\10\1\4\1\0\1\4\1\206\24\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\7\4\1\111\16\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\3\0\2\4\2\0"+
    "\1\10\1\4\1\0\5\4\1\77\20\4\1\0\1\10"+
    "\7\0\1\10\6\0\1\4\3\0\2\4\2\0\1\10"+
    "\1\4\1\0\6\4\1\265\17\4\1\0\1\10\7\0"+
    "\1\10\6\0\1\4\3\0\2\4\2\0\1\10\1\4"+
    "\1\0\1\4\1\266\24\4\1\0\1\10\7\0\1\10"+
    "\6\0\1\4\3\0\2\4\2\0\1\10\1\4\1\0"+
    "\16\4\1\267\7\4\1\0\1\10\7\0\1\10\6\0"+
    "\1\4\3\0\2\4\2\0\1\10\1\4\1\0\10\4"+
    "\1\206\15\4\1\0\1\10\7\0\1\10\6\0\1\4"+
    "\3\0\2\4\2\0\1\10\1\4\1\0\24\4\1\77"+
    "\1\4\1\0\1\10\7\0\1\10\6\0\1\4\3\0"+
    "\2\4\2\0\1\10\1\4\1\0\21\4\1\270\4\4"+
    "\1\0\1\10\7\0\1\10\6\0\1\4\3\0\2\4"+
    "\2\0\1\10\1\4\1\0\2\4\1\172\23\4\1\0"+
    "\1\10\7\0\1\10\6\0\1\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8134];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\34\1\1\11\14\1\1\0\7\1\2\0"+
    "\42\1\1\0\1\1\1\0\1\11\3\0\1\11\1\0"+
    "\3\1\2\0\2\1\2\0\3\1\3\0\12\1\1\0"+
    "\25\1\1\0\1\11\5\1\1\0\2\1\1\11\20\1"+
    "\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { lexeme=yytext(); return Flotante;
          }
        case 13: break;
        case 6: 
          { lexeme=yytext(); return Operador;
          }
        case 14: break;
        case 12: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { lexeme=yytext(); return Error;
          }
        case 15: break;
        case 10: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { lexeme=yytext(); return Error;
          }
        case 16: break;
        case 1: 
          { lexeme=yytext(); return Error;
          }
        case 17: break;
        case 2: 
          { lexeme=yytext();
    if (lexeme.length() < 128){
        return Identificador;
    }
    return Error;
          }
        case 18: break;
        case 3: 
          { lexeme=yytext(); return Entero;
          }
        case 19: break;
        case 5: 
          { return CambioLinea;
          }
        case 20: break;
        case 7: 
          { lexeme=yytext(); return PalabraReservada;
          }
        case 21: break;
        case 8: 
          { lexeme=yytext(); return String;
          }
        case 22: break;
        case 9: 
          { lexeme=yytext(); return Caracter;
          }
        case 23: break;
        case 4: 
          { /*Ignore*/
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
