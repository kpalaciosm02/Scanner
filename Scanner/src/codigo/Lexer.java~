/* The following code was generated by JFlex 1.4.3 on 30/9/23, 20:10 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/9/23, 20:10 from the specification file
 * <tt>C:/Users/kenda/OneDrive/Documentos/GitHub/Scanner/Scanner/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\40\2\0\1\40\22\0\1\3\1\0\1\57\5\0"+
    "\1\47\1\50\1\35\1\44\1\42\1\5\1\54\1\37\1\6\11\2"+
    "\1\53\1\43\1\46\1\41\1\45\2\0\1\7\1\12\1\21\1\24"+
    "\1\4\1\26\1\13\1\23\1\14\1\56\1\31\1\17\1\32\1\15"+
    "\1\16\1\30\1\56\1\10\1\22\1\20\1\27\1\33\1\25\1\55"+
    "\1\11\1\56\1\51\1\0\1\52\1\0\1\1\1\0\1\7\1\12"+
    "\1\21\1\24\1\4\1\26\1\13\1\23\1\14\1\56\1\31\1\17"+
    "\1\32\1\15\1\16\1\30\1\56\1\10\1\22\1\20\1\27\1\33"+
    "\1\25\1\55\1\11\1\56\1\34\1\0\1\36\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\23\4"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\4"+
    "\1\1\1\0\3\4\1\24\1\25\7\4\2\26\2\4"+
    "\1\27\13\4\1\26\14\4\2\0\1\3\1\30\1\3"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\42\1\4\1\0\1\43\1\4\1\26\2\4"+
    "\1\44\7\4\1\45\7\4\1\46\5\4\1\26\4\4"+
    "\1\47\1\0\1\3\1\50\1\51\1\0\1\42\1\52"+
    "\1\0\1\53\1\4\1\26\22\4\3\0\1\42\1\4"+
    "\1\26\15\4\1\26\10\4\1\26\4\4\1\26\2\4"+
    "\1\26\166\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\60\0\60\0\60"+
    "\0\u0570\0\u05a0\0\u05d0\0\60\0\60\0\60\0\60\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u0630\0\u06c0\0\u06f0\0\u0720\0\60"+
    "\0\60\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u06c0\0\u08d0\0\u0900\0\u06c0\0\u0930\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\60"+
    "\0\60\0\u0e10\0\60\0\60\0\60\0\60\0\u0e40\0\60"+
    "\0\60\0\u0e70\0\60\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\60"+
    "\0\u0f60\0\u0f60\0\u0f90\0\u0fc0\0\u0f60\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u0f60\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u1230\0\u1260\0\u0f60\0\u1290\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u0f60"+
    "\0\u1470\0\u14a0\0\60\0\60\0\u14d0\0\u1500\0\u0f60\0\u1530"+
    "\0\60\0\u1560\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u14a0\0\u18f0\0\u1920"+
    "\0\60\0\u1950\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40"+
    "\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0"+
    "\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10"+
    "\0\u1d40\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80"+
    "\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100"+
    "\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280"+
    "\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400"+
    "\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580"+
    "\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700"+
    "\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880"+
    "\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00"+
    "\0\u2a30\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80"+
    "\0\u2bb0\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00"+
    "\0\u2d30\0\u2d60\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80"+
    "\0\u2eb0\0\u2ee0\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000"+
    "\0\u3030\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180"+
    "\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300"+
    "\0\u3330\0\u3360\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\12\1\24\1\25\1\26\1\27\1\30"+
    "\1\12\1\31\1\32\1\33\1\34\1\2\1\35\1\4"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\12\1\53\62\0"+
    "\1\3\3\0\1\3\45\0\1\54\6\0\1\4\34\0"+
    "\1\4\20\0\2\55\1\0\1\55\1\0\7\55\1\56"+
    "\1\55\1\57\14\55\21\0\2\55\6\0\1\60\33\0"+
    "\1\61\72\0\1\54\4\0\2\55\1\0\1\55\1\0"+
    "\2\55\1\62\4\55\1\63\16\55\21\0\2\55\2\0"+
    "\2\55\1\0\1\64\1\0\26\55\21\0\2\55\2\0"+
    "\2\55\1\0\1\55\1\0\26\55\21\0\2\55\2\0"+
    "\2\55\1\0\1\65\1\0\3\55\1\66\4\55\1\67"+
    "\15\55\21\0\2\55\2\0\2\55\1\0\1\55\1\0"+
    "\10\55\1\70\15\55\21\0\2\55\2\0\2\55\1\0"+
    "\1\55\1\0\7\55\1\71\10\55\1\72\5\55\21\0"+
    "\2\55\2\0\2\55\1\0\1\55\1\0\6\55\1\73"+
    "\1\55\1\74\15\55\21\0\2\55\2\0\2\55\1\0"+
    "\1\55\1\0\2\55\1\75\15\55\1\72\5\55\21\0"+
    "\2\55\2\0\2\55\1\0\1\55\1\0\1\55\1\76"+
    "\6\55\1\77\15\55\21\0\2\55\2\0\2\55\1\0"+
    "\1\55\1\0\2\55\1\100\1\101\4\55\1\72\4\55"+
    "\1\102\10\55\21\0\2\55\2\0\2\55\1\0\1\55"+
    "\1\0\1\55\1\57\6\55\1\103\4\55\1\104\10\55"+
    "\21\0\2\55\2\0\2\55\1\0\1\105\1\0\12\55"+
    "\1\106\2\55\1\107\10\55\21\0\2\55\2\0\2\55"+
    "\1\0\1\55\1\0\6\55\1\110\1\55\1\111\15\55"+
    "\21\0\2\55\2\0\2\55\1\0\1\55\1\0\2\55"+
    "\1\112\3\55\1\113\6\55\1\114\10\55\21\0\2\55"+
    "\2\0\2\55\1\0\1\55\1\0\1\55\1\115\4\55"+
    "\1\116\1\55\1\117\10\55\1\120\4\55\21\0\2\55"+
    "\2\0\2\55\1\0\1\55\1\0\7\55\1\121\16\55"+
    "\21\0\2\55\2\0\2\55\1\0\1\55\1\0\1\55"+
    "\1\122\1\123\23\55\21\0\2\55\2\0\2\55\1\0"+
    "\1\55\1\0\10\55\1\124\15\55\21\0\2\55\2\0"+
    "\2\55\1\0\1\55\1\0\1\55\1\125\24\55\21\0"+
    "\2\55\1\0\35\126\1\127\1\130\21\126\41\0\1\131"+
    "\55\0\1\132\1\0\1\133\57\0\1\134\2\0\1\135"+
    "\54\0\1\136\3\0\1\137\53\0\1\140\3\0\1\141"+
    "\1\142\52\0\1\143\20\0\1\144\3\0\1\145\52\0"+
    "\2\55\1\0\1\55\1\0\10\55\1\146\15\55\21\0"+
    "\2\55\2\0\2\147\1\0\1\147\1\0\26\147\21\0"+
    "\2\147\1\150\1\0\2\151\1\0\1\151\1\0\26\151"+
    "\21\0\2\151\2\0\2\151\1\0\1\151\1\0\16\151"+
    "\1\152\7\151\21\0\2\151\2\0\2\151\1\0\1\151"+
    "\1\0\14\151\1\153\11\151\21\0\2\151\2\0\2\151"+
    "\1\0\1\151\1\0\2\151\1\154\23\151\21\0\2\151"+
    "\2\0\2\151\1\0\1\151\1\0\16\151\1\155\7\151"+
    "\21\0\2\151\2\0\2\151\1\0\1\151\1\0\1\151"+
    "\1\156\11\151\1\157\6\151\1\160\3\151\21\0\2\151"+
    "\2\0\2\151\1\0\1\151\1\0\5\151\1\161\20\151"+
    "\21\0\2\151\2\0\2\151\1\0\1\151\1\0\12\151"+
    "\1\153\13\151\21\0\2\151\2\0\2\151\1\0\1\151"+
    "\1\0\10\151\1\162\15\151\21\0\2\151\2\0\2\151"+
    "\1\0\1\151\1\0\12\151\1\163\13\151\21\0\2\151"+
    "\2\0\2\151\1\0\1\151\1\0\11\151\1\164\1\152"+
    "\13\151\21\0\2\151\2\0\2\151\1\0\1\151\1\0"+
    "\11\151\1\152\14\151\21\0\2\151\2\0\2\151\1\0"+
    "\1\151\1\0\12\151\1\165\13\151\21\0\2\151\2\0"+
    "\2\151\1\0\1\151\1\0\4\151\1\166\21\151\21\0"+
    "\2\151\2\0\2\151\1\0\1\151\1\0\7\151\1\167"+
    "\16\151\21\0\2\151\2\0\2\151\1\0\1\151\1\0"+
    "\21\151\1\153\4\151\21\0\2\151\2\0\2\151\1\0"+
    "\1\151\1\0\22\151\1\153\3\151\21\0\2\151\2\0"+
    "\2\151\1\0\1\170\1\0\26\151\21\0\2\151\2\0"+
    "\2\151\1\0\1\151\1\0\7\151\1\171\16\151\21\0"+
    "\2\151\2\0\2\151\1\0\1\151\1\0\1\151\1\172"+
    "\24\151\21\0\2\151\2\0\2\151\1\0\1\151\1\0"+
    "\12\151\1\152\13\151\21\0\2\151\2\0\2\151\1\0"+
    "\1\151\1\0\2\151\1\173\23\151\21\0\2\151\2\0"+
    "\2\151\1\0\1\151\1\0\10\151\1\174\15\151\21\0"+
    "\2\151\2\0\2\151\1\0\1\151\1\0\25\151\1\175"+
    "\21\0\2\151\2\0\2\151\1\0\1\151\1\0\17\151"+
    "\1\176\6\151\21\0\2\151\2\0\2\151\1\0\1\151"+
    "\1\0\6\151\1\177\17\151\21\0\2\151\2\0\2\151"+
    "\1\0\1\151\1\0\12\151\1\200\13\151\21\0\2\151"+
    "\2\0\2\151\1\0\1\151\1\0\6\151\1\201\17\151"+
    "\21\0\2\151\2\0\2\151\1\0\1\151\1\0\11\151"+
    "\1\202\14\151\21\0\2\151\2\0\2\151\1\0\1\151"+
    "\1\0\11\151\1\153\14\151\21\0\2\151\2\0\2\151"+
    "\1\0\1\151\1\0\2\151\1\203\23\151\21\0\2\151"+
    "\2\0\2\151\1\0\1\151\1\0\7\151\1\204\16\151"+
    "\21\0\2\151\2\0\2\151\1\0\1\151\1\0\12\151"+
    "\1\205\13\151\21\0\2\151\2\0\2\151\1\0\1\151"+
    "\1\0\13\151\1\206\12\151\21\0\2\151\2\0\2\151"+
    "\1\0\1\151\1\0\10\151\1\207\15\151\21\0\2\151"+
    "\2\0\2\151\1\0\1\151\1\0\16\151\1\210\7\151"+
    "\21\0\2\151\2\0\2\151\1\0\1\151\1\0\2\151"+
    "\1\152\23\151\21\0\2\151\1\0\36\126\1\130\21\126"+
    "\35\127\1\211\1\212\21\127\40\132\1\0\17\132\41\0"+
    "\1\213\57\0\1\214\20\0\1\144\1\0\1\215\1\0"+
    "\1\144\53\0\1\216\1\0\1\215\54\0\2\151\1\0"+
    "\1\151\1\0\2\151\1\217\23\151\21\0\2\151\2\0"+
    "\2\220\1\0\1\220\1\0\26\220\21\0\2\220\1\221"+
    "\1\0\2\222\1\0\1\222\1\0\26\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\223\1\0\26\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\222\1\0\1\222\1\224\24\222"+
    "\21\0\2\222\2\0\2\222\1\0\1\222\1\0\11\222"+
    "\1\223\4\222\1\223\7\222\21\0\2\222\2\0\2\222"+
    "\1\0\1\222\1\0\10\222\1\225\15\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\226\1\0\26\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\222\1\0\6\222\1\227\17\222"+
    "\21\0\2\222\2\0\2\222\1\0\1\222\1\0\11\222"+
    "\1\230\14\222\21\0\2\222\2\0\2\222\1\0\1\222"+
    "\1\0\10\222\1\223\15\222\21\0\2\222\2\0\2\222"+
    "\1\0\1\222\1\0\6\222\1\231\17\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\232\1\0\26\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\222\1\0\5\222\1\233\20\222"+
    "\21\0\2\222\2\0\2\222\1\0\1\222\1\0\7\222"+
    "\1\223\16\222\21\0\2\222\2\0\2\222\1\0\1\222"+
    "\1\0\14\222\1\234\11\222\21\0\2\222\2\0\2\222"+
    "\1\0\1\222\1\0\2\222\1\223\23\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\222\1\0\6\222\1\235\17\222"+
    "\21\0\2\222\2\0\2\222\1\0\1\222\1\0\2\222"+
    "\1\236\23\222\21\0\2\222\2\0\2\222\1\0\1\222"+
    "\1\0\7\222\1\237\16\222\21\0\2\222\2\0\2\222"+
    "\1\0\1\222\1\0\12\222\1\240\13\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\222\1\0\15\222\1\223\10\222"+
    "\21\0\2\222\2\0\2\222\1\0\1\222\1\0\11\222"+
    "\1\240\14\222\21\0\2\222\2\0\2\222\1\0\1\222"+
    "\1\0\14\222\1\240\11\222\21\0\2\222\2\0\2\222"+
    "\1\0\1\222\1\0\17\222\1\241\6\222\21\0\2\222"+
    "\2\0\2\222\1\0\1\222\1\0\13\222\1\242\12\222"+
    "\21\0\2\222\2\0\2\222\1\0\1\222\1\0\6\222"+
    "\1\232\17\222\21\0\2\222\2\0\2\222\1\0\1\222"+
    "\1\0\23\222\1\243\2\222\21\0\2\222\2\0\2\222"+
    "\1\0\1\222\1\0\5\222\1\244\5\222\1\245\12\222"+
    "\21\0\2\222\1\0\35\127\1\211\1\130\21\127\35\246"+
    "\1\247\22\246\5\0\1\250\1\251\35\0\1\250\15\0"+
    "\1\216\3\0\1\216\52\0\2\220\1\0\1\220\1\0"+
    "\26\220\21\0\2\220\1\150\1\0\2\252\1\0\1\252"+
    "\1\0\26\252\21\0\2\252\2\0\2\252\1\0\1\252"+
    "\1\0\3\252\1\253\22\252\21\0\2\252\2\0\2\252"+
    "\1\0\1\252\1\0\2\252\1\254\23\252\21\0\2\252"+
    "\2\0\2\252\1\0\1\252\1\0\1\252\1\255\24\252"+
    "\21\0\2\252\2\0\2\252\1\0\1\252\1\0\7\252"+
    "\1\253\16\252\21\0\2\252\2\0\2\252\1\0\1\256"+
    "\1\0\26\252\21\0\2\252\2\0\2\252\1\0\1\252"+
    "\1\0\7\252\1\257\16\252\21\0\2\252\2\0\2\252"+
    "\1\0\1\252\1\0\11\252\1\253\14\252\21\0\2\252"+
    "\2\0\2\252\1\0\1\252\1\0\6\252\1\260\17\252"+
    "\21\0\2\252\2\0\2\252\1\0\1\252\1\0\12\252"+
    "\1\253\13\252\21\0\2\252\2\0\2\252\1\0\1\252"+
    "\1\0\7\252\1\261\16\252\21\0\2\252\2\0\2\252"+
    "\1\0\1\252\1\0\12\252\1\262\13\252\21\0\2\252"+
    "\2\0\2\252\1\0\1\252\1\0\12\252\1\263\13\252"+
    "\21\0\2\252\2\0\2\252\1\0\1\253\1\0\26\252"+
    "\21\0\2\252\2\0\2\252\1\0\1\252\1\0\1\252"+
    "\1\264\24\252\21\0\2\252\2\0\2\252\1\0\1\252"+
    "\1\0\12\252\1\265\13\252\21\0\2\252\2\0\2\252"+
    "\1\0\1\254\1\0\26\252\21\0\2\252\2\0\2\252"+
    "\1\0\1\252\1\0\2\252\1\266\23\252\21\0\2\252"+
    "\2\0\2\252\1\0\1\267\1\0\26\252\21\0\2\252"+
    "\1\0\35\246\1\247\1\130\21\246\6\0\1\251\52\0"+
    "\2\270\1\0\1\270\1\0\26\270\21\0\2\270\2\0"+
    "\2\270\1\0\1\270\1\0\16\270\1\271\7\270\21\0"+
    "\2\270\2\0\2\270\1\0\1\270\1\0\12\270\1\271"+
    "\13\270\21\0\2\270\2\0\2\270\1\0\1\270\1\0"+
    "\1\270\1\272\24\270\21\0\2\270\2\0\2\270\1\0"+
    "\1\271\1\0\26\270\21\0\2\270\2\0\2\270\1\0"+
    "\1\270\1\0\7\270\1\273\16\270\21\0\2\270\2\0"+
    "\2\270\1\0\1\270\1\0\5\270\1\271\20\270\21\0"+
    "\2\270\2\0\2\270\1\0\1\270\1\0\6\270\1\274"+
    "\17\270\21\0\2\270\2\0\2\270\1\0\1\270\1\0"+
    "\10\270\1\271\15\270\21\0\2\270\2\0\2\270\1\0"+
    "\1\270\1\0\2\270\1\275\23\270\21\0\2\270\2\0"+
    "\2\270\1\0\1\270\1\0\6\270\1\276\17\270\21\0"+
    "\2\270\2\0\2\270\1\0\1\270\1\0\1\270\1\277"+
    "\24\270\21\0\2\270\2\0\2\270\1\0\1\270\1\0"+
    "\16\270\1\300\7\270\21\0\2\270\2\0\2\301\1\0"+
    "\1\301\1\0\26\301\21\0\2\301\2\0\2\301\1\0"+
    "\1\301\1\0\7\301\1\302\16\301\21\0\2\301\2\0"+
    "\2\301\1\0\1\301\1\0\12\301\1\302\13\301\21\0"+
    "\2\301\2\0\2\301\1\0\1\301\1\0\7\301\1\303"+
    "\16\301\21\0\2\301\2\0\2\301\1\0\1\301\1\0"+
    "\16\301\1\302\7\301\21\0\2\301\2\0\2\301\1\0"+
    "\1\301\1\0\10\301\1\304\15\301\21\0\2\301\2\0"+
    "\2\301\1\0\1\301\1\0\24\301\1\302\1\301\21\0"+
    "\2\301\2\0\2\301\1\0\1\301\1\0\21\301\1\305"+
    "\4\301\21\0\2\301\2\0\2\306\1\0\1\306\1\0"+
    "\26\306\21\0\2\306\2\0\2\306\1\0\1\306\1\0"+
    "\12\306\1\307\13\306\21\0\2\306\2\0\2\306\1\0"+
    "\1\306\1\0\7\306\1\307\16\306\21\0\2\306\2\0"+
    "\2\306\1\0\1\306\1\0\2\306\1\310\23\306\21\0"+
    "\2\306\2\0\2\311\1\0\1\311\1\0\26\311\21\0"+
    "\2\311\2\0\2\311\1\0\1\312\1\0\26\311\21\0"+
    "\2\311\2\0\2\313\1\0\1\313\1\0\26\313\21\0"+
    "\2\313\2\0\2\314\1\0\1\314\1\0\26\314\21\0"+
    "\2\314\2\0\2\315\1\0\1\315\1\0\26\315\21\0"+
    "\2\315\2\0\2\316\1\0\1\316\1\0\26\316\21\0"+
    "\2\316\2\0\2\317\1\0\1\317\1\0\26\317\21\0"+
    "\2\317\2\0\2\320\1\0\1\320\1\0\26\320\21\0"+
    "\2\320\2\0\2\321\1\0\1\321\1\0\26\321\21\0"+
    "\2\321\2\0\2\322\1\0\1\322\1\0\26\322\21\0"+
    "\2\322\2\0\2\323\1\0\1\323\1\0\26\323\21\0"+
    "\2\323\2\0\2\324\1\0\1\324\1\0\26\324\21\0"+
    "\2\324\2\0\2\325\1\0\1\325\1\0\26\325\21\0"+
    "\2\325\2\0\2\326\1\0\1\326\1\0\26\326\21\0"+
    "\2\326\2\0\2\327\1\0\1\327\1\0\26\327\21\0"+
    "\2\327\2\0\2\330\1\0\1\330\1\0\26\330\21\0"+
    "\2\330\2\0\2\331\1\0\1\331\1\0\26\331\21\0"+
    "\2\331\2\0\2\332\1\0\1\332\1\0\26\332\21\0"+
    "\2\332\2\0\2\333\1\0\1\333\1\0\26\333\21\0"+
    "\2\333\2\0\2\334\1\0\1\334\1\0\26\334\21\0"+
    "\2\334\2\0\2\335\1\0\1\335\1\0\26\335\21\0"+
    "\2\335\2\0\2\336\1\0\1\336\1\0\26\336\21\0"+
    "\2\336\2\0\2\337\1\0\1\337\1\0\26\337\21\0"+
    "\2\337\2\0\2\340\1\0\1\340\1\0\26\340\21\0"+
    "\2\340\2\0\2\341\1\0\1\341\1\0\26\341\21\0"+
    "\2\341\2\0\2\342\1\0\1\342\1\0\26\342\21\0"+
    "\2\342\2\0\2\343\1\0\1\343\1\0\26\343\21\0"+
    "\2\343\2\0\2\344\1\0\1\344\1\0\26\344\21\0"+
    "\2\344\2\0\2\345\1\0\1\345\1\0\26\345\21\0"+
    "\2\345\2\0\2\346\1\0\1\346\1\0\26\346\21\0"+
    "\2\346\2\0\2\347\1\0\1\347\1\0\26\347\21\0"+
    "\2\347\2\0\2\350\1\0\1\350\1\0\26\350\21\0"+
    "\2\350\2\0\2\351\1\0\1\351\1\0\26\351\21\0"+
    "\2\351\2\0\2\352\1\0\1\352\1\0\26\352\21\0"+
    "\2\352\2\0\2\353\1\0\1\353\1\0\26\353\21\0"+
    "\2\353\2\0\2\354\1\0\1\354\1\0\26\354\21\0"+
    "\2\354\2\0\2\355\1\0\1\355\1\0\26\355\21\0"+
    "\2\355\2\0\2\356\1\0\1\356\1\0\26\356\21\0"+
    "\2\356\2\0\2\357\1\0\1\357\1\0\26\357\21\0"+
    "\2\357\2\0\2\360\1\0\1\360\1\0\26\360\21\0"+
    "\2\360\2\0\2\361\1\0\1\361\1\0\26\361\21\0"+
    "\2\361\2\0\2\362\1\0\1\362\1\0\26\362\21\0"+
    "\2\362\2\0\2\363\1\0\1\363\1\0\26\363\21\0"+
    "\2\363\2\0\2\364\1\0\1\364\1\0\26\364\21\0"+
    "\2\364\2\0\2\365\1\0\1\365\1\0\26\365\21\0"+
    "\2\365\2\0\2\366\1\0\1\366\1\0\26\366\21\0"+
    "\2\366\2\0\2\367\1\0\1\367\1\0\26\367\21\0"+
    "\2\367\2\0\2\370\1\0\1\370\1\0\26\370\21\0"+
    "\2\370\2\0\2\371\1\0\1\371\1\0\26\371\21\0"+
    "\2\371\2\0\2\372\1\0\1\372\1\0\26\372\21\0"+
    "\2\372\2\0\2\373\1\0\1\373\1\0\26\373\21\0"+
    "\2\373\2\0\2\374\1\0\1\374\1\0\26\374\21\0"+
    "\2\374\2\0\2\375\1\0\1\375\1\0\26\375\21\0"+
    "\2\375\2\0\2\376\1\0\1\376\1\0\26\376\21\0"+
    "\2\376\2\0\2\377\1\0\1\377\1\0\26\377\21\0"+
    "\2\377\2\0\2\u0100\1\0\1\u0100\1\0\26\u0100\21\0"+
    "\2\u0100\2\0\2\u0101\1\0\1\u0101\1\0\26\u0101\21\0"+
    "\2\u0101\2\0\2\u0102\1\0\1\u0102\1\0\26\u0102\21\0"+
    "\2\u0102\2\0\2\u0103\1\0\1\u0103\1\0\26\u0103\21\0"+
    "\2\u0103\2\0\2\u0104\1\0\1\u0104\1\0\26\u0104\21\0"+
    "\2\u0104\2\0\2\u0105\1\0\1\u0105\1\0\26\u0105\21\0"+
    "\2\u0105\2\0\2\u0106\1\0\1\u0106\1\0\26\u0106\21\0"+
    "\2\u0106\2\0\2\u0107\1\0\1\u0107\1\0\26\u0107\21\0"+
    "\2\u0107\2\0\2\u0108\1\0\1\u0108\1\0\26\u0108\21\0"+
    "\2\u0108\2\0\2\u0109\1\0\1\u0109\1\0\26\u0109\21\0"+
    "\2\u0109\2\0\2\u010a\1\0\1\u010a\1\0\26\u010a\21\0"+
    "\2\u010a\2\0\2\u010b\1\0\1\u010b\1\0\26\u010b\21\0"+
    "\2\u010b\2\0\2\u010c\1\0\1\u010c\1\0\26\u010c\21\0"+
    "\2\u010c\2\0\2\u010d\1\0\1\u010d\1\0\26\u010d\21\0"+
    "\2\u010d\2\0\2\u010e\1\0\1\u010e\1\0\26\u010e\21\0"+
    "\2\u010e\2\0\2\u010f\1\0\1\u010f\1\0\26\u010f\21\0"+
    "\2\u010f\2\0\2\u0110\1\0\1\u0110\1\0\26\u0110\21\0"+
    "\2\u0110\2\0\2\u0111\1\0\1\u0111\1\0\26\u0111\21\0"+
    "\2\u0111\2\0\2\u0112\1\0\1\u0112\1\0\26\u0112\21\0"+
    "\2\u0112\2\0\2\u0113\1\0\1\u0113\1\0\26\u0113\21\0"+
    "\2\u0113\2\0\2\u0114\1\0\1\u0114\1\0\26\u0114\21\0"+
    "\2\u0114\2\0\2\u0115\1\0\1\u0115\1\0\26\u0115\21\0"+
    "\2\u0115\2\0\2\u0116\1\0\1\u0116\1\0\26\u0116\21\0"+
    "\2\u0116\2\0\2\u0117\1\0\1\u0117\1\0\26\u0117\21\0"+
    "\2\u0117\2\0\2\u0118\1\0\1\u0118\1\0\26\u0118\21\0"+
    "\2\u0118\2\0\2\u0119\1\0\1\u0119\1\0\26\u0119\21\0"+
    "\2\u0119\2\0\2\u011a\1\0\1\u011a\1\0\26\u011a\21\0"+
    "\2\u011a\2\0\2\u011b\1\0\1\u011b\1\0\26\u011b\21\0"+
    "\2\u011b\2\0\2\u011c\1\0\1\u011c\1\0\26\u011c\21\0"+
    "\2\u011c\2\0\2\u011d\1\0\1\u011d\1\0\26\u011d\21\0"+
    "\2\u011d\2\0\2\u011e\1\0\1\u011e\1\0\26\u011e\21\0"+
    "\2\u011e\2\0\2\u011f\1\0\1\u011f\1\0\26\u011f\21\0"+
    "\2\u011f\2\0\2\u0120\1\0\1\u0120\1\0\26\u0120\21\0"+
    "\2\u0120\2\0\2\u0121\1\0\1\u0121\1\0\26\u0121\21\0"+
    "\2\u0121\2\0\2\u0122\1\0\1\u0122\1\0\26\u0122\21\0"+
    "\2\u0122\2\0\2\u0123\1\0\1\u0123\1\0\26\u0123\21\0"+
    "\2\u0123\2\0\2\u0124\1\0\1\u0124\1\0\26\u0124\21\0"+
    "\2\u0124\2\0\2\u0125\1\0\1\u0125\1\0\26\u0125\21\0"+
    "\2\u0125\2\0\2\u0126\1\0\1\u0126\1\0\26\u0126\21\0"+
    "\2\u0126\2\0\2\u0127\1\0\1\u0127\1\0\26\u0127\21\0"+
    "\2\u0127\2\0\2\u0128\1\0\1\u0128\1\0\26\u0128\21\0"+
    "\2\u0128\2\0\2\u0129\1\0\1\u0129\1\0\26\u0129\21\0"+
    "\2\u0129\2\0\2\u012a\1\0\1\u012a\1\0\26\u012a\21\0"+
    "\2\u012a\2\0\2\u012b\1\0\1\u012b\1\0\26\u012b\21\0"+
    "\2\u012b\2\0\2\u012c\1\0\1\u012c\1\0\26\u012c\21\0"+
    "\2\u012c\2\0\2\u012d\1\0\1\u012d\1\0\26\u012d\21\0"+
    "\2\u012d\2\0\2\u012e\1\0\1\u012e\1\0\26\u012e\21\0"+
    "\2\u012e\2\0\2\u012f\1\0\1\u012f\1\0\26\u012f\21\0"+
    "\2\u012f\2\0\2\u0130\1\0\1\u0130\1\0\26\u0130\21\0"+
    "\2\u0130\2\0\2\u0131\1\0\1\u0131\1\0\26\u0131\21\0"+
    "\2\u0131\2\0\2\u0132\1\0\1\u0132\1\0\26\u0132\21\0"+
    "\2\u0132\2\0\2\u0133\1\0\1\u0133\1\0\26\u0133\21\0"+
    "\2\u0133\2\0\2\u0134\1\0\1\u0134\1\0\26\u0134\21\0"+
    "\2\u0134\2\0\2\u0135\1\0\1\u0135\1\0\26\u0135\21\0"+
    "\2\u0135\2\0\2\u0136\1\0\1\u0136\1\0\26\u0136\21\0"+
    "\2\u0136\2\0\2\u0137\1\0\1\u0137\1\0\26\u0137\21\0"+
    "\2\u0137\2\0\2\u0138\1\0\1\u0138\1\0\26\u0138\21\0"+
    "\2\u0138\2\0\2\u0139\1\0\1\u0139\1\0\26\u0139\21\0"+
    "\2\u0139\2\0\2\u013a\1\0\1\u013a\1\0\26\u013a\21\0"+
    "\2\u013a\2\0\2\u013b\1\0\1\u013b\1\0\26\u013b\21\0"+
    "\2\u013b\2\0\2\u013c\1\0\1\u013c\1\0\26\u013c\21\0"+
    "\2\u013c\2\0\2\u013d\1\0\1\u013d\1\0\26\u013d\21\0"+
    "\2\u013d\2\0\2\u013e\1\0\1\u013e\1\0\26\u013e\21\0"+
    "\2\u013e\2\0\2\u013f\1\0\1\u013f\1\0\26\u013f\21\0"+
    "\2\u013f\2\0\2\u0140\1\0\1\u0140\1\0\26\u0140\21\0"+
    "\2\u0140\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\3\11\3\1\4\11\4\1\1\0"+
    "\3\1\2\11\44\1\2\0\2\11\1\1\4\11\1\1"+
    "\2\11\1\1\1\11\3\1\1\0\1\11\40\1\1\0"+
    "\1\1\2\11\1\0\2\1\1\0\1\11\24\1\3\0"+
    "\1\11\226\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { lexeme=yytext(); return OperadorDesplazamientoDerechaAsignacion;
          }
        case 44: break;
        case 4: 
          { lexeme=yytext(); return Identificador;
          }
        case 45: break;
        case 24: 
          { lexeme=yytext(); return OperadorMultiplicacionAsignacion;
          }
        case 46: break;
        case 21: 
          { lexeme=yytext(); return OperadorRestaAsignacion;
          }
        case 47: break;
        case 6: 
          { lexeme=yytext(); return OperadorMultiplicacion;
          }
        case 48: break;
        case 30: 
          { lexeme=yytext(); return OperadorMenorOIgualQue;
          }
        case 49: break;
        case 31: 
          { lexeme=yytext(); return OperadorDiferente;
          }
        case 50: break;
        case 13: 
          { lexeme=yytext(); return OperadorMenorQue;
          }
        case 51: break;
        case 18: 
          { lexeme=yytext(); return OperadorDosPuntos;
          }
        case 52: break;
        case 20: 
          { lexeme=yytext(); return OperadorDecremento;
          }
        case 53: break;
        case 35: 
          { lexeme=yytext(); return String;
          }
        case 54: break;
        case 27: 
          { lexeme=yytext(); return OperadorIncremento;
          }
        case 55: break;
        case 14: 
          { lexeme=yytext(); return OperadorParentesisIzquierdo;
          }
        case 56: break;
        case 29: 
          { lexeme=yytext(); return OperadorDesplazamientoDerecha;
          }
        case 57: break;
        case 23: 
          { lexeme=yytext(); return OperadorOr;
          }
        case 58: break;
        case 10: 
          { lexeme=yytext(); return OperadorPuntoYComa;
          }
        case 59: break;
        case 34: 
          { lexeme=yytext(); return Flotante;
          }
        case 60: break;
        case 19: 
          { lexeme=yytext(); return OperadorPunto;
          }
        case 61: break;
        case 5: 
          { lexeme=yytext(); return OperadorResta;
          }
        case 62: break;
        case 22: 
          { lexeme=yytext(); return PalabraReservada;
          }
        case 63: break;
        case 15: 
          { lexeme=yytext(); return OperadorParentesisDerecho;
          }
        case 64: break;
        case 32: 
          { lexeme=yytext(); return OperadorDesplazamientoIzquierda;
          }
        case 65: break;
        case 42: 
          { lexeme=yytext(); return OperadorXor;
          }
        case 66: break;
        case 39: 
          { lexeme=yytext(); return OperadorMod;
          }
        case 67: break;
        case 17: 
          { lexeme=yytext(); return OperadorCorcheteDerecho;
          }
        case 68: break;
        case 16: 
          { lexeme=yytext(); return OperadorCorcheteIzquierdo;
          }
        case 69: break;
        case 41: 
          { lexeme=yytext(); return OperadorDesplazamientoIzquierdaAsignacion;
          }
        case 70: break;
        case 9: 
          { lexeme=yytext(); return OperadorComa;
          }
        case 71: break;
        case 33: 
          { lexeme=yytext(); return OperadorAsignacion;
          }
        case 72: break;
        case 8: 
          { lexeme=yytext(); return OperadorIgual;
          }
        case 73: break;
        case 38: 
          { lexeme=yytext(); return OperadorDiv;
          }
        case 74: break;
        case 11: 
          { lexeme=yytext(); return OperadorSuma;
          }
        case 75: break;
        case 37: 
          { lexeme=yytext(); return OperadorNot;
          }
        case 76: break;
        case 36: 
          { lexeme=yytext(); return OperadorAnd;
          }
        case 77: break;
        case 12: 
          { lexeme=yytext(); return OperadorMayorQue;
          }
        case 78: break;
        case 2: 
          { lexeme=yytext(); return Entero;
          }
        case 79: break;
        case 7: 
          { lexeme=yytext(); return OperadorDivision;
          }
        case 80: break;
        case 43: 
          { lexeme=yytext(); return Caracter;
          }
        case 81: break;
        case 28: 
          { lexeme=yytext(); return OperadorMayorOIgualQue;
          }
        case 82: break;
        case 3: 
          { /*Ignore*/
          }
        case 83: break;
        case 26: 
          { lexeme=yytext(); return OperadorSumaAsignacion;
          }
        case 84: break;
        case 25: 
          { lexeme=yytext(); return OperadorDivisionAsignacion;
          }
        case 85: break;
        case 1: 
          { lexeme=yytext(); return Error;
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
